package edu.nuzp.proupernutrition;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Bundle;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.view.Menu;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.material.navigation.NavigationView;

import androidx.annotation.NonNull;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.appcompat.app.AppCompatActivity;

import edu.nuzp.proupernutrition.databinding.ActivityMainBinding;

public class MainActivity extends AppCompatActivity {

    private AppBarConfiguration mAppBarConfiguration;
    private ActivityMainBinding binding;

    private SQLiteConnector connector;
    private SQLiteDatabase db;
    private Cursor result;
    private String LOG_TAG = "MY_DB_LOG_TAG";

    private class SQLiteConnector extends SQLiteOpenHelper {
        public SQLiteConnector(Context context, String name, int version) {
            super(context, "DishesDB2", null, 1);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            try {
                db.execSQL("create table dishes (_id integer primary key autoincrement, dish varchar(50), components varchar(300), " +
                        "country varchar(20), author varchar(70), cooking varchar(1000));");
                Log.d(LOG_TAG, "Ok dishes");//
                init();
            } catch (Exception e) {
                Log.d(LOG_TAG, "Exception creating table 'dishes'");
            }

        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (newVersion == 2 && oldVersion == 1) {

            }
        }

        public void init(){
            ContentValues contentValues = new ContentValues();
            //contentValues.clear();
            contentValues.put("dish", "Паэлья");
            contentValues.put("components", "Рис - 200г\n" +
                    "Лук - 1 шт.\n" +
                    "Чеснок - 2-3 зубчика\n" +
                    "Филе куринное - 1 шт.\n" +
                    "Куриный бульен - 400-500 г\n" +
                    "Куркума - 1 ч.л.\n" +
                    "Лимон - 1/2 шт.\n" +
                    "Подсолнечное масло - 2 ст.л.\n" +
                    "Перец чили - 1/2 ч.л.\n" +
                    "Приправа для курицы - 1 ч.л.");
            contentValues.put("country", "Испания");
            contentValues.put("author", "Ферран Адрия-и-Акоста");
            contentValues.put("cooking", "1) Нарежьте мелким кубиком одну луковицу и 2-3 зубчика чеснока.\n" +
                    "2) Куриное филе нарежьте небольшими полосками или кубиками.\n" +
                    "3) Подрумяньте на сковородке с 2-3 ст.л. подсолнечного масла лук и чеснок, добавьте 1 ч.л. куркумы, 1/2 ч.л. перца чили и 1 ч.л. приправы для курицы.\n" +
                    "4) Добавьте в сковородку куриное филе и тушите его до полуготовности мяса в тчении 3-5 минут.\n" +
                    "5) Засыпьте 200г риса. Перемешайте, чтоб рис пропитался маслом и был сочным.\n" +
                    "6) Залейте рис 400-500 г горячего куриного бульона так, чтобы он полностью покрыл содержимое сковороды. Можно использовать воду.\n" +
                    "7) Добавьте сок 1/2 лимона и соль.\n" +
                    "8) Добавьте куркуму. Готовьте 10-15 минут на маленьком огне. пока рис полностью не впитает жидкость. " +
                    "За минуту до окончания приготовления увеличьте огонь до максимума, чтобы нижний слой немного пригорел образуя карамельную корочку.");
            long rowID = db.insert("dishes", null, contentValues); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues2 = new ContentValues();
            contentValues2.put("dish", "Морковь по-корейски");
            contentValues2.put("components", "Морковь - 1кг\n" +
                    "Чеснок - 1 зубчик\n" +
                    "Подсолнечное масло - 1/2 стакана\n" +
                    "Уксус - 1 д.л.\n" +
                    "Сахар - 2 ст.л.\n" +
                    "Соль - 1 ст.л.\n" +
                    "Молотый перец - 1 ч.л.");
            contentValues2.put("country", "Корея");
            contentValues2.put("author", "Нобу Мацухиса");
            contentValues2.put("cooking", "1) Моем и чистим морковь. Натераем морковь на специальной терке, чтоб она была тонкая как соломка.\n" +
                    "2) Нашинкованую морковь посыпьте солью, сахаром и молотым перцем. Добавьте уксус, перемешайте все руками и оставьте на 10-15 минут.\n" +
                    "3) Почистите и пропустите через пресс чеснок. Посыпьте им морковь, но не перемешивайте.\n" +
                    "4) На сковородке раскалите растительное масло. Вылейте его на чеснок. Все перемешайте.\n" +
                    "5) Морковь готова. Нужно лишь разложить ее по контейнерам и убрать в холодильник на 5-6 часов, или на ночь.");
            long rowID2 = db.insert("dishes", null, contentValues2); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID2 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID2);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues3 = new ContentValues();
            contentValues3.put("dish", "Биск");
            contentValues3.put("components", "Сливки - 400 мл\n" +
                    "Креветки  300 гр\n" +
                    "Вино белое - 100 мл\n" +
                    "Лук - 1 шт.\n" +
                    "Морковь - 1 шт.\n" +
                    "Томатная паста - 2 ст.л.\n" +
                    "Сливочное масло - 2 ст.л.");
            contentValues3.put("country", "Франция");
            contentValues3.put("author", "Поль Бокюз");
            contentValues3.put("cooking", "1) Лук и морковь очистите и нарежьте мелкими кубиками. \n" +
                    "2) В кастрюле с толстым дном разогрейте растительное масло и выложите очищенные креветки. Обжарьте их, периодически помешивая, около 4 минут. " +
                    "Они должны слегка подрумяниться. Затем переложите креветки на тарелку.\n" +
                    "3) В кастрюлю выложите лук, морковь и креветочные очистки. Жарьте, помешивая, 3 минуты.\n" +
                    "4) Влейте в кастрюлю 400 мл воды и вино. Добавьте томатную пасту и хорошенько все перемешайте. Накройте кастрюлю крышкой и тушите все вместе на " +
                    "медленном огне около 1 часа 20 минут, периодически перемешивая массу.\n" +
                    "5) Получившуюся смесь протрите через сито, отсекая креветочные очистки от остальной массы. У вас получится полувязкая ароматная масса.\n" +
                    "6) Перелейте суп обратно в кастрюлю и поставьте на огонь. Снова доведите до кипения и кипятите на небольшом огне 3-5 минут.\n" +
                    "7) Тем временем сливки подогрейте, но не кипятите.\n" +
                    "8) Тонкой струйкой при постоянном помешивании влейте горячие сливки, приправьте суп солью и перцем и сразу же снимите с огня.\n" +
                    "9) Разлейте суп по тарелкам, добавив в каждую обжаренные креветки и украсив базиликом.");
            long rowID3 = db.insert("dishes", null, contentValues3); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID3 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID3);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues4 = new ContentValues();
            contentValues.put("dish", "Омлет");
            contentValues4.put("components", "Яйца - 6 шт.\n" +
                    "Сыр - 70 г\n" +
                    "Молоко - 200 мл\n" +
                    "Перец - 1 шт.\n" +
                    "Лук - 0,5 шт.\n" +
                    "Помидор - 1 шт.\n" +
                    "Фасоль - 30 г\n" +
                    "Сливочное масло - 50 г\n" +
                    "Укроп и петрушка - 10 г");
            contentValues4.put("country", "Франция");
            contentValues4.put("author", "Поль Бокюз");
            contentValues4.put("cooking", "1) В миске взобьем венчиком яйца с молоком.\n" +
                    "2) Добавим натертый на средней терке твердый сыр. Хорошо перемешаем все ингредиенты.\n" +
                    "3) Стручковую фасоль нарезаем небольшими кусочками. Болгарский перец нарезаем кубиком, лук репчатый нарежем на четвертинки.\n" +
                    "4) В сковороде растопим сливочное масло и обжарим на нем овощи в течение 5-7 минут. Добавим соль и перец по вкусу.\n" +
                    "5) Вливаем к овощам омлетную смесь.\n" +
                    "6) Помидоры нарезаем на четвертинки и выкладываем в омлет.\n" +
                    "7) Укроп нарезаем мелко и посыпаем им верх омлета с овощами. Накрываем сковороду крышкой и готовим омлет под крышкой на среднем огне 10-12 минут, до готовности.");
            long rowID4 = db.insert("dishes", null, contentValues4); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID4 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID4);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues5 = new ContentValues();
            contentValues5.put("dish", "Жареные кальмары");
            contentValues5.put("components", "Кальмар - 1 шт.\n" +
                    "Розмарин - 1 шт.\n" +
                    "Чеснок - 1 зубчик\n" +
                    "Перец чили - 1/3 шт.\n" +
                    "Масло растительное - 2 ст.л.");
            contentValues5.put("country", "Россия");
            contentValues5.put("author", "Дмитрий Шуршаков");
            contentValues5.put("cooking", "1) Почистите тушку кальмара от внутренностей и пленки.\n" +
                    "2) Сделайте на ней тонкие надрезы крест-накрест.\n" +
                    "3) Сбрызните лимонным соком, положите сверху розмарин и оставьте на 10-15 минут.\n" +
                    "4) Мелко нарежьте перец чили и чеснок. Смешайте их в одной миске. Добавьте туда же растительное масло и немного лимонного сока.\n" +
                    "5) Когда кальмар промаринуется поджарьте его на сковороде с оливковым маслом. Лучше жарить в течение одной минуты с обеих сторон, иначе кальмар может стать 'резиновым'.\n" +
                    "6) Полейте соусом. Готово!");
            long rowID5 = db.insert("dishes", null, contentValues5); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID5 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID5);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues6 = new ContentValues();
            contentValues6.put("dish", "Ризотто");
            contentValues6.put("components", "Лук – 1 шт.\n" +
                    "Сливочное масло – 50 г\n" +
                    "Куриный бульон – 2 л\n" +
                    "Рис – 340 г\n" +
                    "Белое сухое вино – 125 мл\n" +
                    "Сыр – 60-80 г");
            contentValues6.put("country", "Италия");
            contentValues6.put("author", "Нет повара");
            contentValues6.put("cooking", "1) Репчатый лук очистите и мелко нарежьте. Нагрейте на среднем огне большой сотейник и растопите в нем 30 г сливочного масла. " +
                    "Выложите лук и готовьте на слабом огне до тех пор, пока не станет прозрачным.\n" +
                    "2) Куриный бульон перелейте в ковшик и доведите до кипения. Оставьте на минимальном огне. " +
                    "Для правильного приготовления ризотто нам необходимо поддерживать бульон в горячем состоянии.\n" +
                    "3) В это же время в сотейник с луком аккуратно всыпьте рис для ризотто и, помешивая широкими движениями, жарьте на среднем огне 3 минуты. " +
                    "Он должен стать почти прозрачным.\n" +
                    "4) Влейте в сотейник с рисом и луком белое сухое вино. Перемешайте и снова доведите до кипения на сильном огне. " +
                    "Готовьте до тех пор, пока рис не впитает всю жидкость из сотейника.\n" +
                    "5) Осторожно влейте порцию горячего куриного бульона (примерно 200 мл). Постоянно перемешивая, готовьте ризотто до тех пор, пока он не впитается. " +
                    "Следите, чтобы рис не пристал ко дну.\n" +
                    "6) Влейте в сотейник следующую порцию куриного бульона и готовьте по той же схеме. Не забывайте постоянно перемешивать ризотто! " +
                    "Когда останется 500 мл бульона, добавляйте его по 125 мл за один раз.\n" +
                    "7) Периодически пробуйте зернышки риса, отслеживая степень его готовности. " +
                    "Когда он станет мягким снаружи, но твердоватым внутри, ризотто можно считать готовым.\n" +
                    "8) Снимите сотейник огня. Добавьте оставшееся сливочное масло и энергично перемешайте ризотто по кругу. " +
                    "Всыпьте тертый сыр, приправьте солью и перцем по вкусу. Перемешайте и оставьте на 5–7 минут, затем подайте на стол.");
            long rowID6 = db.insert("dishes", null, contentValues6); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID6 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID6);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues7 = new ContentValues();
            contentValues7.put("dish", "Равиоли");
            contentValues7.put("components", "Мука — 200 г\n" +
                    "Яйцо — 2 шт.\n" +
                    "Масло оливковое — 1 ст.л.\n" +
                    "Соль — 2 щепотки\n" +
                    "Фарш — 250 г\n" +
                    "Лук — 1 шт.");
            contentValues7.put("country", "Италия");
            contentValues7.put("author", "Нет повара");
            contentValues7.put("cooking", "1) Просейте муку в миску. Сделайте углубление, положите яйца, соль и ложку масла.\n" +
                    "2) Замесите крутое тесто, вымешивайте хорошо, пока колобок не станет гладким и упругим. Готовое тесто положите в пакет и дайте отдохнуть минут 30-40.\n" +
                    "3) Приготовьте фарш: перекрутите мясо через мясорубку, добавьте мелко порезанный лук, соль, специи, пару столовых ложек воды. Хорошо перемешайте руками фарш.\n" +
                    "4) Тесто разделите на 4 равных части. Одну часть раскатайте максимально тонко, примерно 1 мл.\n" +
                    "5) Чайной ложкой набирайте фарш и выкладывайте ровными рядами.\n" +
                    "6) Раскатайте второй лист теста, накройте первый лист с фаршем. Осторожно ребром ладони пройдитесь между рядами, придавите немного тесто.\n" +
                    "7) Ножом порежьте тесто на квадратики.\n" +
                    "8) Для лучшего закрепления нужно вилочкой придавить края равиоли.\n" +
                    "9) Доведите воду до кипения, посолите. Варите равиоли 5-7 минут. Готовые равиоли подайте с маслом и зеленью к столу! Можно предложить сметану, майонез или соус.");
            long rowID7 = db.insert("dishes", null, contentValues7); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID7 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID7);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues8 = new ContentValues();
            contentValues8.put("dish", "Пицца");
            contentValues8.put("components", "Дрожжи — 1 ч.л.\n" +
                    "Сахар — 1 ч.л.\n" +
                    "Соль — 0,5 ч.л.\n" +
                    "Масло оливковое — 1 ст.л.\n" +
                    "Мука — 1,5 стакана\n" +
                    "Томатная паста — 2 ст.л.\n" +
                    "Сыр — 200 г\n" +
                    "Салями — 150−200 г\n" +
                    "Помидор — 2 шт.\n" +
                    "Оливки — 5−10 шт.\n" +
                    "Зелень");
            contentValues8.put("country", "Италия");
            contentValues8.put("author", "Нет повара");
            contentValues8.put("cooking", "1) В теплой воде разводим дрожжи с сахаром. Затем в чашке, где будем замешивать тесто, просеиваем муку, добавляем соль и перемешиваем вилкой. " +
                    "Сюда же добавляем воду с дрожжами и оливковое масло. Замешиваем тесто. После получения однородного теста, накрываем его полотенцем и оставляем в теплом месте на полчаса.\n" +
                    "2) Включаем духовку. Устанавливаем температуру 190−200°С. Нарезаем начинку. Нарезаем кружочками салями. Томаты режем кружочками или лепестками. Оливки — пополам (или колечками). " +
                    "Сыр натираем на крупной терке.\n" +
                    "3) Форму для пиццы или противень необходимо смазать оливковым маслом. " +
                    "Подошедшее к этому времени тесто разминаем руками и растягиваем пальцами по всей поверхности формы или противня, толщиной слоя 3−4 мм.\n" +
                    "4) Далее намазываем тесто томатной пастой, распределяя по всей площади теста. " +
                    "Поверх выкладываем сыр, а только потом на неё оставшиеся компоненты нашей начинки для пиццы: салями, оливки и томаты.\n" +
                    "5) Отправляем пиццу в духовку на 15−20 минут. Вы увидите, как тесто начнет подниматься, а сыр станет золотистым, значит пицца готова.");
            long rowID8 = db.insert("dishes", null, contentValues8); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID8 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID8);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues9 = new ContentValues();
            contentValues9.put("dish", "Вареники");
            contentValues9.put("components", "Картофель – 500 г\n" +
                    "Мука – 250-270 г\n" +
                    "Яйца – 2 шт.\n" +
                    "Молоко – 100 мл\n" +
                    "Лук – 2 шт.\n" +
                    "Масло растительное – 50 мл+1 ст.л.\n" +
                    "Масло сливочное – 50 г\n" +
                    "Сахар – 2 ст.л.");
            contentValues9.put("country", "Украина");
            contentValues9.put("author", "Владимир Ярославский");
            contentValues9.put("cooking", "1) Картошку для вареников тщательно вымыть, затем очистить. Сложить клубни в кастрюлю и залить водой. Поставить на плиту и довести до кипения. Варить на слабом огне 30 минут.\n" +
                    "2) Приготовить тесто для вареников с картошкой. Смешать просеянную с солью муку с яйцами, молоком и 2 ст. л. растительного масла. Вымесить однородное тесто, накрыть и оставить на 30 мин.\n" +
                    "3) Лук для начинки вареников с картощкой очистить и мелко нарезать. Половину измельченного лука обжарить на оставшемся растительном масле до золотистого цвета, около 6 мин.\n" +
                    "4) Картошку размять в пюре со сливочным маслом. Добавить обжаренный лук, посолить, поперчить и перемешать. Оставшийся лук обжарить в 1 ст. л. сливочного масла, 10 мин. " +
                    "Добавить сахар и готовить, пока он полностью не растает. Снять с огня, переложить в миску и оставить в теплом месте.\n" +
                    "5) Тесто для вареников раскатать в тонкий пласт. Вырезать из него кружки диаметром примерно 7 см. Разложить по кружкам начинку, сложить их пополам и влажными руками защипать края.\n" +
                    "6) Выложить вареники в кипящую подсоленную воду. Когда они всплывут, варить еще 3 мин. " +
                    "Готовые вареники с картошкой поместить в миску с карамелизованным луком, перемешать и подать к столу. Можно присыпать тонко нарезанным зеленым луком.");
            long rowID9 = db.insert("dishes", null, contentValues9); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID9 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID9);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues10 = new ContentValues();
            contentValues10.put("dish", "Борщ");
            contentValues10.put("components", "Картофель — 4-5 шт.\n" +
                    "Помидоры — 2-5 шт.\n" +
                    "Лук — 2 шт.\n" +
                    "Морковь — 1-2 шт.\n" +
                    "Капуста — 500 г\n" +
                    "Масло растительное — 100 г\n" +
                    "Чеснок — 2-4 зубчиков\n" +
                    "Свекла — 1 шт.");
            contentValues10.put("country", "Украина");
            contentValues10.put("author", "Эктор Измаэль Хименес-Браво");
            contentValues10.put("cooking", "1) Чистим картофель, шинкуем его и отправляем вариться. Тем временем делаем поджарку: шинкуем мелко лук, отправляем его жариться на растительном масле.\n" +
                    "2) Пока жарится лук, измельчаем на средней терке морковь, отправляем ее к луку.\n" +
                    "3) Добавляем измельченную свеклу и томаты. Измельчаем чеснок, его тоже отправляем к овощам. Затем добавляем немного воды и пропариваем наши овощи.\n" +
                    "4) Когда картофель немного проварится, отправляем к нему нашу пассеровку и нашинкованную капусту. Теперь можно посолить и приправить его по вкусу.\n" +
                    "5) Варим до готовности овощей и выключаем. Борщ должен настояться хотя бы час.");
            long rowID10 = db.insert("dishes", null, contentValues10); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID10 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID10);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues11 = new ContentValues();
            contentValues11.put("dish", "Винегрет");
            contentValues11.put("components", "Свекла - 4 шт.\n" +
                    "Картофель - 3 шт.\n" +
                    "Соленые огурцы - 4 шт.\n" +
                    "Зеленый горошек - 1 банка\n" +
                    "Морковь - 3 шт.\n" +
                    "Лук - 2 шт.\n" +
                    "Масло оливковое - 150 мл\n" +
                    "Уксус - 50 мл\n" +
                    "Квашеная капуста - 100 г");
            contentValues11.put("country", "Россия");
            contentValues11.put("author", "Константин Ивлев");
            contentValues11.put("cooking", "1) Картошку, свеклу и морковь варим.\n" +
                    "2) Делаем заправку. Смешать масло, соль, перец и уксус.\n" +
                    "3) Лук режем и заливаем столовой ложкой уксуса. Маринуем 10 минут.\n" +
                    "4) В одну миску режем картошку, морковь, горошек, лук. И заправляем это 2/3 заправки.\n" +
                    "5) Во вторую миску свеклу и остаток заправки. Перемешать и оставить на 5–10 минут.\n" +
                    "6) Огурец режем. И добавляем вместе с капустой в свеклу.\n" +
                    "7) Смешать все.");
            long rowID11 = db.insert("dishes", null, contentValues11); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID11 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID11);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues12 = new ContentValues();
            contentValues12.put("dish", "Вергуны");
            contentValues12.put("components", "Молоко — 1 стакан \n" +
                    "Сахар — 0,5 стакана \n" +
                    "Яйцо — 1 шт.\n" +
                    "Мука — 4 стакана \n" +
                    "Сода — 0,5 Ч.л. \n" +
                    "Масло растительное — 2 ст.л.");
            contentValues12.put("country", "Украина");
            contentValues12.put("author", "Владимир Ярославский");
            contentValues12.put("cooking", "1) Для начала в миске перемешаем сахар и соду, погашенную уксусомы. \n" +
                    "2) Добавим яйцо и вилочкой перетираем до однородного состояния. Затем вольем молоко, перемешаем. Понемногу всыпаем муку. \n" +
                    "3) Готовое тесто перемешиваем, закрываем полотенцем, оставим на 15 минут. \n" +
                    "4) Из теста формируем колбаску, режем ее одинаковыми кусочками, из каждого формируем вергуны. \n" +
                    "5) Обжариваем каждый вергун в растительном масле, постоянно переворачивая, 2-3 минуты. \n" +
                    "6) Вот и все! При подаче вергуны лучше всего посыпать сахарной пудрой, и подавать с чаем или молоком.");
            long rowID12 = db.insert("dishes", null, contentValues12); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID12 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID12);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues13 = new ContentValues();
            contentValues13.put("dish", "Голубцы");
            contentValues13.put("components", "Капуста — 1,5 кг \n" +
                    "Фарш — 500 г \n" +
                    "Рис — 1 стакан \n" +
                    "Лук — 1 шт. \n" +
                    "Укроп — 2 ст.л. \n" +
                    "Яйца — 1 шт. \n" +
                    "Томатная паста — 150-200 г \n" +
                    "Паприка — 1 ст.л. \n" +
                    "Чеснок — 1 зубчик");
            contentValues13.put("country", "Национальная");
            contentValues13.put("author", "Нет повара");
            contentValues13.put("cooking", "1) Вымойте капусту, вырежьте кочерыжку. В большую кастрюлю налейте воду и отправьте ее на огонь, доведите до кипения и " +
                    "положите в кипящую воду кочан, варите после закипания 5 минут. Слейте воду с капустой в дуршлаг и оставьте ее на 5-10 минут для остывания.\n" +
                    "2) Сделайте начинку: в миску выложите мясной фарш, добавьте к нему отварной рис, измельченный укроп, лук, чеснок, вбейте куриное яйцо, посолите и поперчите, перемешайте.\n" +
                    "3) Разберите кочан на листья, цельные отложите, порванные или совсем маленькие измельчите. У больших листьев для голубцов срежьте толстую часть острым ножом.\n" +
                    "4) Возьмите немного начинки и сформируйте небольшую котлетку, выложите на край листа. Заверните края внутрь и сформируйте небольшой рулет.\n" +
                    "5) В сотейник добавьте томатную пасту, воду, сахар, соль и доведите до кипения.\n" +
                    "6) В кастрюлю выложите измельченную капусту, сверху уложите часть голубцов. Залейте их половиной соуса, выложите оставшиеся голубцы. " +
                    "Залейте их остатками соуса и варите после закипания под закрытой крышкой на слабом огне 2-2,5 часа.\n" +
                    "7) Подавайте голубцы сразу после приготовления с томатным соусом, в которым они тушились.");
            long rowID13 = db.insert("dishes", null, contentValues13); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID13 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID13);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues14 = new ContentValues();
            contentValues14.put("dish", "Гречневая каша");
            contentValues14.put("components", "Гречневая крупа - 400 г\n" +
                    "Свинина - 400 г\n" +
                    "Лук - 150 г\n" +
                    "Морковь - 150 г");
            contentValues14.put("country", "Национальная");
            contentValues14.put("author", "Нет повара");
            contentValues14.put("cooking", "1) Свинину нарезать на небольшие кусочки.\n" +
                    "2) Лук мелко нарезать, морковь натереть на крупной терке.\n" +
                    "3) Обжарить лук и морковь до золотистого цвета.\n" +
                    "4) Мясо обжарить на растительном масле до румяного цвета.\n" +
                    "5) Мясо залить литром кипятка. Тушить под крышкой минут 15-20.\n" +
                    "6) Добавить к мясу промытую гречневую крупу. Немного посолить и поперчить. Тушить под крышкой на небольшом огне 15 минут.\n" +
                    "7) Затем добавить овощи, по желанию зелень и специи. Хорошо перемешать и тушить на самом маленьком огне еще 15 минут.");
            long rowID14 = db.insert("dishes", null, contentValues14); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID14 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID14);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues15 = new ContentValues();
            contentValues15.put("dish", "Гороховая каша");
            contentValues15.put("components", "Горох - 1,5-2 стакана\n" +
                    "Свинина - 600 г\n" +
                    "Масло оливковое - 1 ст.л.\n" +
                    "Лук - 1 головка\n" +
                    "Морковь - 1 шт.\n" +
                    "Итальянские травы - 1,5-2 ч.л.");
            contentValues15.put("country", "Национальная");
            contentValues15.put("author", "Нет повара");
            contentValues15.put("cooking", "1) Кусочки свинины обжарьте со всех сторон на растительном масле.\n" +
                    "2) Добавьте кусочки лука и моркови, специи и соль, потушите все вместе пару минут.\n" +
                    "3) Затем добавляйте подготовленный (замоченный и промытый) горох и влейте воду так, чтобы она была выше уровня гороха на 1,5 - 2 см. \n" +
                    "4) Доведите до закипания, убавьте огонь до среднего и варите под крышкой до готовности, а точнее, до желаемой степени разваренности.\n" +
                    "5) Гороховая каша с мясом готова. По желанию при подаче гороховую кашу со свининой можно заправить каким-либо маслом и посыпать свежей зеленью.");
            long rowID15 = db.insert("dishes", null, contentValues15); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID15 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID15);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues16 = new ContentValues();
            contentValues16.put("dish", "Ячневая каша");
            contentValues16.put("components", "Ячневая крупа – 1 стакан\n" +
                    "Свинина – 300 г\n" +
                    "Лук – 1 шт.\n" +
                    "Морковь – 0,5 шт.\n" +
                    "Перец – 0,5 шт.\n" +
                    "Томатный соус – 1 ч.л.\n" +
                    "Масло растительное – 2 ст.л.");
            contentValues16.put("country", "Национальная");
            contentValues16.put("author", "Нет повара");
            contentValues16.put("cooking", "1) Мякоть свинины нарежьте на куски среднего размера. На огне нагрейте сковороду, поверхность слегка смажьте маслом. В раскаленную сковороду уложите кусочки мяса.\n" +
                    "2) Жарьте свинину на сильном огне по 5 минут с каждой стороны - до появления румяной корочки. Затем огонь убавьте, мясо залейте стаканом воды, посолите, тушите 30 минут под крышкой.\n" +
                    "3) Овощи очистите, лук и перец нарежьте небольшими квадратиками, морковь — пластинками.\n" +
                    "4) Овощи обжарьте на масляной сковороде отдельно от мяса 5 минут, до мягкости.\n" +
                    "5) После тушения мясо вместе с бульоном перекиньте в кастрюлю. К мясу поместите пассерованные овощи.\n" +
                    "6) Ячневую крупу промойте несколько раз, убирая весь мусор. Ячку всыпьте в емкость к мясу и овощам, приправьте паприкой.\n" +
                    "7) Смесь залейте водой, доведите до кипения, жидкость посолите.\n" +
                    "8) Готовьте ячневую кашу с мясом на самом низком огне под крышкой, часто перемешивая ложкой. Время приготовления составляет 25 минут. " +
                    "После снятия с огня каше обязательно дайте настояться 10-15 минут.");
            long rowID16 = db.insert("dishes", null, contentValues16); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID16 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID16);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues17 = new ContentValues();
            contentValues17.put("dish", "Кутья");
            contentValues17.put("components", "Рис - 1 стакан\n" +
                    "Изюм - 100 г\n" +
                    "Курага - 100 г\n" +
                    "Мёд - 2 с.л.\n" +
                    "Соль - 1 ч.л.");
            contentValues17.put("country", "Национальная");
            contentValues17.put("author", "Нет повара");
            contentValues17.put("cooking", "1) Курагу и изюм хорошо промыть. Курагу нарезать небольшими кусочками.\n" +
                    "2) Рис промыть и переложить в кастрюлю. Залить стакан риса 2.5 стаканами воды и посолить. Поставить кастрюлю на средний " +
                    "огонь и довести рис до кипения. Варить рис 10 минут, периодически помешивая лопаткой.\n" +
                    "3) Когда рис хорошо загустеет, добавить к нему сухофрукты и мёд.\n" +
                    "4) Не перемешивая убрать кастрюлю с огня, накрыть крышкой и оставить на 15 минут. Сухофрукты хорошо пропарятся, но не " +
                    "размякнут, поэтому рисовая каша получится рассыпчатой. В конце все перемешать ложкой.");
            long rowID17 = db.insert("dishes", null, contentValues17); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID17 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID17);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues18 = new ContentValues();
            contentValues18.put("dish", "Йоркширский пудинг");
            contentValues18.put("components", "Яйца - 4 шт.\n" +
                    "Мука - 150 г\n" +
                    "Молоко - 175 г\n" +
                    "Соль - 1/2 ч.л.\n" +
                    "Растительный жир - 100 мл");
            contentValues18.put("country", "Великобритания");
            contentValues18.put("author", "Джеймс Мартин");
            contentValues18.put("cooking", "1) разбейте четыре яйца, влейте молоко и воду, добавьте муку и соль. Хорошенько перемешайте до получения гладкого теста по консистенции напоминающего густые сливки.\n" +
                    "2) Дайте тесту «отдохнуть» при комнатной температуре, по крайней мере, в течение получаса.\n" +
                    "3) Разогрейте духовку до 230°C. Равномерно разлейте масло по формочкам или сковородам. Поставьте их в духовой шкаф и прогрейте в течение 7-10 минут, пока жир не начнет дымить.\n" +
                    "4) Выньте из духовки чугунные сковороды или формы с разогретым жиром. Быстро и равномерно разлейте тесто по формам. " +
                    "Тут же верните формы в духовку и выпекайте пока йоркширский пудинг не увеличится в объеме примерно в четыре раза. Их корочка должна приобрести насыщенный коричневый цвет.\n" +
                    "5) Выньте булочки из духовки и немедленно подавайте. Это блюдо надо есть горячим!");
            long rowID18 = db.insert("dishes", null, contentValues18); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID18 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID18);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues19 = new ContentValues();
            contentValues19.put("dish", "Картофельный хлеб");
            contentValues19.put("components", "Мука - 450-550 г\n" +
                    "Картофель — 200 г\n" +
                    "Масло сливочное — 30 г\n" +
                    "Дрожжи — 25 г\n" +
                    "Сахар — 10 г\n" +
                    "Соль — 13 г\n" +
                    "Масло растительное — 1 ст. л.");
            contentValues19.put("country", "Национальная");
            contentValues19.put("author", "Нет повара");
            contentValues19.put("cooking", "1) Картофель почистить, нарезать довольно мелким кубиком, отварить до готовности в слегка подсоленной воде. " +
                    "Картофельный отвар слить в миску, в которой будем замешивать тесто, добавить воды, чтобы объем жидкости был равен 250 мл. Оставить остывать.\n" +
                    "2) Картофель размять толкушкой до состояния однородности, в пюре, добавить сливочное масло.\n" +
                    "3) В уже остывший, теплый картофельный отвар добавить дрожжи, сахар, соль. Растворить до однородности. Добавить картофельное пюре. Перемешать.\n" +
                    "4) Добавить муку. Тесто должно быть хорошо вымешано, до однородности, лишь слегка липнуть к рукам.\n" +
                    "5) Смазать миску и поверхность теста растительным маслом, накрыть полотенцем и поставить в теплое место для подъема на 40 минут. " +
                    "После этого обомять тесто (кулачком). Оставить его подниматься еще на 20 минут в теплом месте под полотенцем.\n" +
                    "6) Припылить стол мукой или немного смазать растительным маслом, выложить тесто. Складываем батоном. Загибая каждый слой, слегка его приминаем, 'прищипываем'.\n" +
                    "7) Сформировать 1 или 2 батона. Форму застелить пергаментной бумагой, уложить на нее батон швом вниз. Сделать косые параллельные надрезы острым ножом. " +
                    "Накрыть полотенцем и оставить на расстойке на 30 минут.\n" +
                    "8) Разогреваем духовку до 220 градусов, выпекаем 20 - 30 минут.");
            long rowID19 = db.insert("dishes", null, contentValues19); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID19 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID19);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues20 = new ContentValues();
            contentValues20.put("dish", "Квашеная капуста");
            contentValues20.put("components", "Капуста - 3 кг\n" +
                    "Морковь - 2 шт.\n" +
                    "Соль - 1,5 ст.л.\n" +
                    "Сахар - 1 ч.л.\n" +
                    "Перец черный горошком - 10-15 шт.\n" +
                    "Лист лавровый - 6-7 шт.");
            contentValues20.put("country", "Германия");
            contentValues20.put("author", "Альфонс Шубек");
            contentValues20.put("cooking", "1) Верхние листья капусты удалить, нашинковать. Морковь очистить и натереть на крупной терке, добавить к капусте.\n" +
                    "2) Капусту посолить, добавить немного сахара, перемешать хорошо руками, немного придавливая, чтобы капуста пустила сок. " +
                    "Далее добавить к капусте черный перец горошком и лавровый лист, перемешать.\n" +
                    "3) Капусту укладывать в чистую банку, очень плотно утрамбовывая (так, чтобы капусту начинал покрывать сок).\n" +
                    "4) Заполнить банку до самого верха.\n" +
                    "5) Банку с капустой накрыть капроновой крышкой, но обратной стороной и поставить для квашения в теплое место на 2-3 суток.");
            long rowID20 = db.insert("dishes", null, contentValues20); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID20 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID20);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues21 = new ContentValues();
            contentValues21.put("dish", "Мясной пирог");
            contentValues21.put("components", "Мука - 2-2,5 ст.\n" +
                    "Кефир - 1 ст.\n" +
                    "Масло растительное - 2 ст.л.\n" +
                    "Соль - 0,5 ч.л;\n" +
                    "Яйцо - 1 шт.\n" +
                    "Сода - щепотка\n" +
                    "Кунжут - для посыпки\n" +
                    "Свинина - 400 г\n" +
                    "Лук - 2 шт.\n" +
                    "Чеснок - 1 зубчик\n" +
                    "Зелень - 3 ст.л.\n" +
                    "Сливки - 4 ст.л.");
            contentValues21.put("country", "Испания");
            contentValues21.put("author", "Ферран Адрия-и-Акоста");
            contentValues21.put("cooking", "1) Яйцо слегка размешать с солью. Добавить кефир, соду, растительное масло и хорошо размешать. Затем нужно подсыпать муку." +
                    " Тесто должно быть достаточно мягким, слегка липким, но отставать от рук. Вымесить его на столе и оставить под полотенцем на 20 минут 'отдохнуть'.\n" +
                    "2) Мясо измельчить вместе с зубчиком чеснока и половинкой лука. Остальной лук порезать тонкой соломкой, зелень измельчить и добавить в фарш. " +
                    "Посолить и поперчить по вкусу. Добавить сливки или молоко для сочности фарша.\n" +
                    "3) Тесто раскатать на столе одной большой лепешкой. Его толщина должна быть не менее 8 мм.\n" +
                    "4) Выложить в центр всю начинку. Собрать края к середине и защипать, не оставляя зазоров, через которые может вытечь сок во время запекания. \n" +
                    "5) Разровнять, перевернуть и раскатать скалкой до ровного и плоского круга. Верх наколоть вилкой, не затрагивая дно, смазать сливками или яйцом, " +
                    "посыпать кунжутом. Положить выпекать при 180°С на 30 минут. \n" +
                    "6) Готовый мясной пирог с фаршем сбрызнуть водой и накрыть полотенцем на 15 минут. Затем можно нарезать и подавать к столу.");
            long rowID21 = db.insert("dishes", null, contentValues21); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID21 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID21);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues22 = new ContentValues();
            contentValues22.put("dish", "Лимпа");
            contentValues22.put("components", "Сухие дрожжи - 10 г\n" +
                    "Светлая патока - 1/2 стакана\n" +
                    "Молоко - 4 стакана\n" +
                    "Масло растительное - 1 стакан\n" +
                    "Сахар - 1/2 стакана\n" +
                    "Соль - 3 ч.л.\n" +
                    "Молотый тмин - 1 ч.л.\n" +
                    "Молотый фенхель - щепотка\n" +
                    "Молотый анис (бадьян) - 1 ч.л.\n" +
                    "Цедра апельсина - 1 шт.\n" +
                    "Мука ржаная - 2 стакана\n" +
                    "Овсяная крупа - 1 стакан\n" +
                    "Мука пшеничная - 10 стаканов");
            contentValues22.put("country", "Швеция");
            contentValues22.put("author", "Нет повара");
            contentValues22.put("cooking", "1) Активировать дрожжи в воде. Размешать в патоке, в соответствии с желаемой сладостью, добавить молоко, масло, сахар по вкусу, соль, специи и цедру. Добавить дрожжи.\n" +
                    "2) Смешать с овсянкой и ржаной мукой, хорошо вымесить. Потихоньку добавлять столько простой муки, сколько возможно, чтобы получилось густое тесто.\n" +
                    "3) Поставить в теплое место до поднятия.\n" +
                    "4) Посыпать верх теста приблизительно 1/4 стакана обычной муки. Вымешать тесто, пока оно не станет гладким. Вымешивать еще 5 или 10 минут, пока оно не станет не только гладким, но и шелковым.\n" +
                    "5) Разделить тесто на 4 равные части. Придать им круглую или продолговатую форму. Дать настояться в теплом месте приблизительно 1 час.\n" +
                    "6) Печь 35 минут при температуре 190 градусов. Украсить горячий хлеб теплой патокой или сиропом для глазури.");
            long rowID22 = db.insert("dishes", null, contentValues22); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID22 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID22);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues23 = new ContentValues();
            contentValues23.put("dish", "Шоколадные шарики");
            contentValues23.put("components", "Масло сливочное - 200 г\n" +
                    "Сахар - 2 д.л.\n" +
                    "Сахар ванильный - 1 ст.л.\n" +
                    "Какао - 7-8 ст.л.\n" +
                    "Овсяные хлопья - 7 д.л.\n" +
                    "Готовый кофе - 3 ч.л.\n" +
                    "Кокосовая стружка");
            contentValues23.put("country", "Швеция");
            contentValues23.put("author", "Нет повара");
            contentValues23.put("cooking", "1) Растопить масло на водяной бане. Добавить немного соли в смесь.\n" +
                    "2) Добавить в масло сахар, кофе, пудру и какао. Тшательно перемешать, чтобы не было никаких комочков.\n" +
                    "3) Добавить порциями овсяные хлопья и перемешать.\n" +
                    "4) Поставить смесь в холодилтник на 30-60 мин. Она должна охладиться до такой консистенции, чтобы из нее можно было удобно катать шарики.\n" +
                    "5) Достаем смесь из холодильника и начинаем катать шарики руками. Каждый шарик обваливаем в кокосой стружке.\n" +
                    "6) Выкладываем шарики на плоскую тарелку. Ставим в холодильник и ждем 30-40 мин.");
            long rowID23 = db.insert("dishes", null, contentValues23); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID23 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID23);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues24 = new ContentValues();
            contentValues24.put("dish", "Розетта");
            contentValues24.put("components", "Мука - 0,5 ст.л.\n" +
                    "Сазар - 1 ст.л.\n" +
                    "Яйцо - 1 шт.\n" +
                    "Молоко - 0,5 ст.л.");
            contentValues24.put("country", "Израиль");
            contentValues24.put("author", "Нет повара");
            contentValues24.put("cooking", "1) Смешать муку, сахар, соль. Добавить яйцо, молоко, ванилин и взбить до однородности.\n" +
                    "2) Влить растительное масло в небольшую кастрюлю и сильно нагреть.\n" +
                    "3) Опустить в него пустую форму для печенья на 15-20 секунд, затем стряхнуть масло и быстро опустить нагретую формочку в тесто на 3/4 высоты.\n" +
                    "4) После подержать 30 секунд в горячем масле и стряхнуть.\n" +
                    "5) Выстелить блюдо бумажным полотенцем и аккуратно с помощью вилки снять печенье. Готовое печенье посыпать сахарной пудрой.");
            long rowID24 = db.insert("dishes", null, contentValues24); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID24 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID24);
            else Log.d(LOG_TAG, "insertion error");

            ContentValues contentValues25 = new ContentValues();
            contentValues25.put("dish", "Смузи-боул");
            contentValues25.put("components", "Авокадо - 1/2 шт.\n" +
                    "Миндальное молоко - 1/4 стакана\n" +
                    "Льняные семочки - 1 ст.л.\n" +
                    "Банан - 1 шт.\n" +
                    "Миндаль - 15 шт.\n" +
                    "Малина - 15 шт.\n" +
                    "Черника - 15 шт.\n" +
                    "Мед - 2 ст.л.");
            contentValues25.put("country", "Национальная");
            contentValues25.put("author", "Нет повара");
            contentValues25.put("cooking", "1) Смешайте все ингридиенты до кремовой текстуры, перелейте в глубокую миску.\n" +
                    "2) Добавьте топпинг и наслаждайтесь.");
            long rowID25 = db.insert("dishes", null, contentValues25); //Вставляємо строку в таблицю. Повертається номер нової строки
            if (rowID25 != -1) Log.d(LOG_TAG, "insertion complete. inserted row ID " + rowID25);
            else Log.d(LOG_TAG, "insertion error");
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        setSupportActionBar(binding.appBarMain.toolbar);
        DrawerLayout drawer = binding.drawerLayout;
        NavigationView navigationView = binding.navView;
        mAppBarConfiguration = new AppBarConfiguration.Builder(
                R.id.nav_home, R.id.nav_components, R.id.nav_dishes, R.id.nav_country, R.id.nav_authors)
                .setOpenableLayout(drawer)
                .build();
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);
        NavigationUI.setupWithNavController(navigationView, navController);

        connector = new SQLiteConnector(this, "DishesDB2", 1);
        db = connector.getWritableDatabase();

        EditText edit = (EditText) findViewById(R.id.edit);
        Button homeitem = (Button) findViewById(R.id.homeitem);
        homeitem.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                try {
                    Intent intent = new Intent(".Dish");
                    String s1 = edit.getText().toString();
                    result = db.rawQuery("Select * from dishes where components like ?", new String[]{"%" + s1 + "%"});
                    while (result.moveToNext()) {
                        int idIndex = result.getColumnIndex("_id");
                        int dishIndex = result.getColumnIndex("dish");
                        int componentsIndex = result.getColumnIndex("components");
                        int countryIndex = result.getColumnIndex("country");
                        int authorIndex = result.getColumnIndex("author");
                        int cookingIndex = result.getColumnIndex("cooking");

                        intent.putExtra("dish", result.getString(dishIndex));
                        intent.putExtra("components", result.getString(componentsIndex));
                        intent.putExtra("country", result.getString(countryIndex));
                        intent.putExtra("author", result.getString(authorIndex));
                        intent.putExtra("cooking", result.getString(cookingIndex));
                        startActivity(intent);

                        Log.d(LOG_TAG, "\n ID = " + result.getInt(idIndex) +
                                "\n dish = " + result.getString(dishIndex) +
                                "\n components = " + result.getString(componentsIndex) +
                                "\n country = " + result.getString(countryIndex) +
                                "\n author = " + result.getString(authorIndex) +
                                "\n cooking = " + result.getString(cookingIndex));
                    }
                    result.close();
                } catch (Exception e) {
                    Log.d(LOG_TAG, "Error " + e);
                }
            }
        });

        EditText edit2 = (EditText) findViewById(R.id.edit2);
        Button homeitem2 = (Button) findViewById(R.id.homeitem2);
        homeitem2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                try {
                    Intent intent = new Intent(".Dish");
                    String s2 = edit2.getText().toString();
                    result = db.rawQuery("Select * from dishes where dish like ?", new String[]{"%" + s2 + "%"});
                    while (result.moveToNext()) {
                        int idIndex = result.getColumnIndex("_id");
                        int dishIndex = result.getColumnIndex("dish");
                        int componentsIndex = result.getColumnIndex("components");
                        int countryIndex = result.getColumnIndex("country");
                        int authorIndex = result.getColumnIndex("author");
                        int cookingIndex = result.getColumnIndex("cooking");

                        intent.putExtra("dish", result.getString(dishIndex));
                        intent.putExtra("components", result.getString(componentsIndex));
                        intent.putExtra("country", result.getString(countryIndex));
                        intent.putExtra("author", result.getString(authorIndex));
                        intent.putExtra("cooking", result.getString(cookingIndex));
                        startActivity(intent);

                        Log.d(LOG_TAG, "\n ID = " + result.getInt(idIndex) +
                                "\n dish = " + result.getString(dishIndex) +
                                "\n components = " + result.getString(componentsIndex) +
                                "\n country = " + result.getString(countryIndex) +
                                "\n author = " + result.getString(authorIndex) +
                                "\n cooking = " + result.getString(cookingIndex));
                    }
                    result.close();
                } catch (Exception e) {
                    Log.d(LOG_TAG, "Error " + e);
                }
            }
        });

        EditText edit3 = (EditText) findViewById(R.id.edit3);
        Button homeitem3 = (Button) findViewById(R.id.homeitem3);
        homeitem3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                try {
                    Intent intent = new Intent(".Dish");
                    String s3 = edit3.getText().toString();
                    result = db.rawQuery("Select * from dishes where country like ?", new String[]{"%" + s3 + "%"});
                    while (result.moveToNext()) {
                        int idIndex = result.getColumnIndex("_id");
                        int dishIndex = result.getColumnIndex("dish");
                        int componentsIndex = result.getColumnIndex("components");
                        int countryIndex = result.getColumnIndex("country");
                        int authorIndex = result.getColumnIndex("author");
                        int cookingIndex = result.getColumnIndex("cooking");

                        intent.putExtra("dish", result.getString(dishIndex));
                        intent.putExtra("components", result.getString(componentsIndex));
                        intent.putExtra("country", result.getString(countryIndex));
                        intent.putExtra("author", result.getString(authorIndex));
                        intent.putExtra("cooking", result.getString(cookingIndex));
                        startActivity(intent);

                        Log.d(LOG_TAG, "\n ID = " + result.getInt(idIndex) +
                                "\n dish = " + result.getString(dishIndex) +
                                "\n components = " + result.getString(componentsIndex) +
                                "\n country = " + result.getString(countryIndex) +
                                "\n author = " + result.getString(authorIndex) +
                                "\n cooking = " + result.getString(cookingIndex));
                    }
                    result.close();
                } catch (Exception e) {
                    Log.d(LOG_TAG, "Error " + e);
                }
            }
        });

        EditText edit4 = (EditText) findViewById(R.id.edit4);
        Button homeitem4 = (Button) findViewById(R.id.homeitem4);
        homeitem4.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                try {
                    Intent intent = new Intent(".Dish");
                    String s4 = edit4.getText().toString();
                    result = db.rawQuery("Select * from dishes where author like ?", new String[]{"%" + s4 + "%"});
                    while (result.moveToNext()) {
                        int idIndex = result.getColumnIndex("_id");
                        int dishIndex = result.getColumnIndex("dish");
                        int componentsIndex = result.getColumnIndex("components");
                        int countryIndex = result.getColumnIndex("country");
                        int authorIndex = result.getColumnIndex("author");
                        int cookingIndex = result.getColumnIndex("cooking");

                        intent.putExtra("dish", result.getString(dishIndex));
                        intent.putExtra("components", result.getString(componentsIndex));
                        intent.putExtra("country", result.getString(countryIndex));
                        intent.putExtra("author", result.getString(authorIndex));
                        intent.putExtra("cooking", result.getString(cookingIndex));
                        startActivity(intent);

                        Log.d(LOG_TAG, "\n ID = " + result.getInt(idIndex) +
                                "\n dish = " + result.getString(dishIndex) +
                                "\n components = " + result.getString(componentsIndex) +
                                "\n country = " + result.getString(countryIndex) +
                                "\n author = " + result.getString(authorIndex) +
                                "\n cooking = " + result.getString(cookingIndex));
                    }
                    result.close();
                } catch (Exception e) {
                    Log.d(LOG_TAG, "Error " + e);
                }
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        Intent intent;
        switch (item.getItemId()) {
            case R.id.action_info:
                Toast.makeText(this, "Приложение создано на кафедре КСМ ученицей группы КНТ-519 Петрик Анастасией", Toast.LENGTH_LONG).show();
                break;
            case R.id.action_exit:
                finish();
                break;
        }
        return true;
    }

    @Override
    public boolean onSupportNavigateUp() {
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        return NavigationUI.navigateUp(navController, mAppBarConfiguration) || super.onSupportNavigateUp();
    }

    @Override
    protected void onDestroy() {
        if (db != null) db.close();
        super.onDestroy();
    }
}